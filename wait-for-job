#!/bin/bash
# Waits for a job to complete.
#
# Includes a one-step approach:
#
# 1. Wait for the nr of expected completion to be equal to nr of succeeded
#
#
set -o errexit
set -o pipefail
set -o nounset
# -m enables job control which is otherwise only enabled in interactive mode
# http://unix.stackexchange.com/a/196606/73578
set -m

DEFAULT_TIMEOUT=60
DEFAULT_NAMESPACE=default

monitor_timeout() {
  local -r wait_pid="$1"
  sleep "${timeout}"
  echo "Timeout ${timeout} exceeded" >&2
  kill "${wait_pid}"
}

get_specified_completions() {
  get_job_jsonpath '{.spec.completions}'
}

get_succeeded() {
  get_job_jsonpath '{.status.succeeded}'
}

get_failed() {
  get_job_jsonpath '{.status.failed}'
}

get_status_type() {
  get_job_jsonpath '{.status.conditions.type}'
}

get_job_jsonpath() {
  local -r jsonpath="$1"

  kubectl --namespace "${namespace}" get job "${job}" -o "jsonpath=${jsonpath}"
}

display_usage_and_exit() {
  echo "Usage: $(basename "$0") [-n <namespace>] [-t <timeout>] <job>" >&2
  echo "Arguments:" >&2
  echo "job REQUIRED: The name of the job the script should wait on" >&2
  echo "-n OPTIONAL: The namespace the job exists in, defaults is the 'default' namespace" >&2
  echo "-t OPTIONAL: How long to wait for the job to be complete, defaults to ${DEFAULT_TIMEOUT} seconds, must be greater than 0" >&2
  exit 1
}

namespace=${DEFAULT_NAMESPACE}
timeout=${DEFAULT_TIMEOUT}

while getopts ':n:t:' arg
do
    case ${arg} in
        n) namespace=${OPTARG};;
        t) timeout=${OPTARG};;
        *) display_usage_and_exit
    esac
done

shift $((OPTIND-1))
if [ "$#" -ne 1 ] ; then   
  display_usage_and_exit
fi
readonly job="$1"

if [[ ${timeout} -le 0 ]]; then
  display_usage_and_exit
fi

echo "Waiting for job of ${job} in namespace ${namespace} with a timeout ${timeout} seconds"

monitor_timeout $$ &
readonly timeout_monitor_pid=$!

trap 'kill -- -${timeout_monitor_pid}' EXIT #Stop timeout monitor

specified_completions=$(get_specified_completions); readonly specified_completions
succeeded=$(get_succeeded)
failed=$(get_failed)

echo "Expected completions for job ${job}: ${specified_completions}"
while [[ ${succeeded} -lt ${specified_completions} ]]; do
  
  if [[ ${failed} -gt ${specified_completions} ]]; then
    echo "Observed fails: ${failed:=0}"
    exit 1
  fi
  
  sleep .5
  echo "Currently observed successes: ${succeeded:=0}"
  succeeded=$(get_succeeded)
  failed=$(get_failed)
done
echo "Observed expected successes: ${succeeded}"

echo "Job ${job} successful. All ${specified_completions} jobs completed."
